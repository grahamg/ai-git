I want to make a python3 interactive script that does the following.

1) user selects a git branch
2) provides initial prompt for code changes
3) the ollama api using the codellama model comes up with some candidate code
4) the user might provide another prompt for code changes
5) the ollama api using the codellama model comes up with another candidate code
6) the user manually reviews the code created
7) either they approve it and merge the branch into master or make their own modifications and merge the branch into master.
8) if the user wishes they can rollback any commit on the current work branch.

the following interactive repl features are available:
1) branch creation and management
2) prompt driven code modifications
3) rollback capabiliies
4) context management
   - ability to clear chat history
   - specify file groups as context for requests
   - automatic inclusion of structural project files (e.g. package.json, requirements.txt)
   - user customizable rules for what constitutes structural files

documentation requirements:
- Each change sequence should be documented in markdown
- Documentation should be automatically generated and maintained
- Clear traceability between prompts, changes, and git commits

Context Management:
Flexible specification of which files provide context
Ability to include/exclude files from context
Automatic inclusion of project structure files
Customizable rules for context inclusion

session management:
Clear separation between different modification sessions

If a conflict is met put the repo on detached head state and allow the user to fix their their stuff or abort and rollback the stuff.

Structure the markdown like a bullet point feature list with commit hashes if possible and include sub bullet points to elaborate further if needed.

The granularity of the individual git commits are left up to the user. The user specifies one prompt per branch. Therefore it up to the user to be either long winded or short winded. So by using the repl it allows the user to specify when to merge into main and when to add another commit to a feature branch with a given prompt.

For example the user might start the read eval print loop with a new branch , then supplies a prompt that enacts the changesâ€” reviews the changes and decides to commit. The tool then summaries the changes for the user. That could take place one or more times on a given branch.

Of course for this to take place the user will need to supply the path to a git repo before going into the repl. Since this is an emacs tool it could be the current repo of a file the user has up

IMPORTANT: I want this contained in one python file with a __main__ method.
It is also important to have functions not too large, they should be somewhat easy to read
and responsable for one thing.

Before going further, please verify your understanding of these project requirements.
